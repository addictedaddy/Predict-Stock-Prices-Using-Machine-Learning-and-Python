# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fdi0HFIfvi_JWzO6gNyKVsK5PYaOXNGz
"""

#install the dependencies
import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
plt.style.use('bmh')

from google.colab import files
uploaded = files.upload()

#store the data in the data frame 
df = pd.read_csv('NFLX.csv')
df.head(6)

#get the total no of days
df.shape

#visualise the data 
plt.figure(figsize=(16,8))
plt.title('Netflix')
plt.xlabel('Days')
plt.ylabel('close price')
plt.plot(df['Close'])
plt.show()

#get the close price
df=df[['Close']]
df.head(4)

#create a variable to predict out' 'x' days in future
future_days=25
#create a new column to (target)
df['Prediction']=df[['Close']].shift(-future_days)
df.tail(4)

#Create a feature data set (X) and convert it to a numpy and remove the last 'x'  rows/days 
X = np.array(df.drop(['Prediction'],1))[:-future_days]
print(X)

#Create the target data set (y) and convert it to a numpy array and get all of the target values except the last "x" rows
y = np.array(df['Prediction'])[:-future_days]
print(y)

#split the data into 75% training and 25% testing 
x_train, x_test,y_train,y_test = train_test_split(X,y,test_size=0.25)

#create the models
tree=DecisionTreeRegressor().fit(x_train,y_train)
#create the linear regression model
lr=LinearRegression().fit(x_train,y_train)

#get the last rows "x" future set
x_future=df.drop(['Prediction'],1)[:-future_days]
x_future=x_future.tail(future_days)
x_future=np.array(x_future)
x_future

#show the models 
tree_pre=tree.predict(x_future)
print(tree_pre)
print()
#show the linear model
lr_pre=lr.predict(x_future)
print(lr_pre)

#visualisation
predictions = tree_pre

valid = df[X.shape[0]:]
valid['Predictions']=predictions

plt.figure(figsize=(16,8))
plt.title('model')
plt.xlabel('Days')
plt.ylabel('cost price')
plt.plot(df['Close'])
plt.plot(valid[['Close','Predictions']])
plt.legend(['Orig','Val','Pred'])
plt.show()

#visualisation
predictions = lr_pre

valid = df[X.shape[0]:]
valid['Predictions']=predictions

plt.figure(figsize=(16,8))
plt.title('model')
plt.xlabel('Days')
plt.ylabel('cost price')
plt.plot(df['Close'])
plt.plot(valid[['Close','Predictions']])
plt.legend(['Orig','Val','Pred'])
plt.show()